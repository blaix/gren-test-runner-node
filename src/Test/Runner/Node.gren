module Test.Runner.Node exposing (Program, run)

import Test exposing (Test)
import Node
import Node.Program as NodeP
import Test.Runner.Log as Log
import Random
import Time


type alias Program =
    NodeP.Program {} {}


-- RUN


run : Test -> Program
run test =
    NodeP.define
        { init = init test
        , update = (\_ _ -> { model = {}, command = Cmd.none })
        , subscriptions = \_ -> Sub.none
        }


init : Test -> NodeP.AppInitTask { model : {}, command : Cmd {} }
init test =
    NodeP.await Node.initialize <| \nodeConfig ->
    NodeP.awaitTask Time.now <| \time ->
        NodeP.startProgram 
            { model = {}
            , command =
                Log.runWithOptions
                    { reportStreamOnPass = nodeConfig.stdout
                    , reportStreamOnFail = nodeConfig.stderr
                    }
                    100
                    (Random.initialSeed (Time.posixToMillis time))
                    test
            }


-- RUN WITH OPTIONS


type alias Options =
    { runs : Int
    , seed : Random.Seed
    }


runWithOptions : Options -> Test -> Program
runWithOptions options test =
    NodeP.define
        { init = initWithOptions options test
        , update = (\_ _ -> { model = {}, command = Cmd.none })
        , subscriptions = \_ -> Sub.none
        }


initWithOptions : Options -> Test -> NodeP.AppInitTask { model : {}, command : Cmd {} }
initWithOptions options test =
    NodeP.await Node.initialize <| \nodeConfig ->
        NodeP.startProgram 
            { model = {}
            , command =
                Log.runWithOptions
                    { reportStreamOnPass = nodeConfig.stdout
                    , reportStreamOnFail = nodeConfig.stderr
                    }
                    options.runs
                    options.seed
                    test
            }
