module Test.Runner.Node exposing (Program, Options, run, runWithOptions)

{-| Define programs that run your tests and outputs the results to the terminal.

An exit code of 1 will be set when there are failing tests.

@docs Program, run

## Customization

@docs Options, runWithOptions

-}

import Test exposing (Test)
import Node
import Node.Program as NodeP
import Test.Runner.Log as Log
import Random
import Time


{-| A value representing a test program.
-}
type alias Program =
    NodeP.Program {} {}


-- RUN


{-| Run a test suite using default options.
-}
run : Test -> Program
run test =
    NodeP.define
        { init = init test
        , update = (\_ _ -> { model = {}, command = Cmd.none })
        , subscriptions = \_ -> Sub.none
        }


init : Test -> NodeP.AppInitTask { model : {}, command : Cmd {} }
init test =
    NodeP.await Node.initialize <| \nodeConfig ->
    NodeP.awaitTask Time.now <| \time ->
        NodeP.startProgram 
            { model = {}
            , command =
                Log.runWithOptions
                    { reportStreamOnPass = nodeConfig.stdout
                    , reportStreamOnFail = nodeConfig.stderr
                    }
                    100
                    (Random.initialSeed (Time.posixToMillis time))
                    test
            }


-- RUN WITH OPTIONS


{-| Different options you can use to customize your test run.

* `runs` configures how many times a `fuzz` test is executed with different inputs.
* `seed` is used to generate random input in `fuzz` tests. A test suite run with the same seed will generate the same fuzz values.

-}
type alias Options =
    { runs : Int
    , seed : Random.Seed
    }


{-| Run a test suite using the provided options.
-}
runWithOptions : Options -> Test -> Program
runWithOptions options test =
    NodeP.define
        { init = initWithOptions options test
        , update = (\_ _ -> { model = {}, command = Cmd.none })
        , subscriptions = \_ -> Sub.none
        }


initWithOptions : Options -> Test -> NodeP.AppInitTask { model : {}, command : Cmd {} }
initWithOptions options test =
    NodeP.await Node.initialize <| \nodeConfig ->
        NodeP.startProgram 
            { model = {}
            , command =
                Log.runWithOptions
                    { reportStreamOnPass = nodeConfig.stdout
                    , reportStreamOnFail = nodeConfig.stderr
                    }
                    options.runs
                    options.seed
                    test
            }
